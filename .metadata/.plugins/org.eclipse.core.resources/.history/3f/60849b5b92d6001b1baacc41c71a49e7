package com.dell.lockedme.application;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.Scanner;

import com.dell.lockedme.model.Users;
import com.dell.lockedme.model.UserCreds;

public class driver {

	// input data
	private static Scanner keyboard;
	private static Scanner input;
	private static Scanner lockerInput;
	// output data
	private static PrintWriter output;
	private static PrintWriter lockerOutput;
	// model to store data.
	private static Users users;
	private static UserCreds userCredentials;

	private static List<Users> userList;
	private static List<UserCreds> usersCredList;
	private static String dbFileName = "database.txt";

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		initApp();
		welcomeScreen();
		signInOptions();
	}

	public static void initApp() {

		File dbFile = new File(dbFileName);
		// File lockerFile = new File("locker-file.txt");

		try {
			if (!dbFile.exists()) {
				dbFile.createNewFile();
			}
			users = new Users();
			userCredentials = new UserCreds();

			// if data available in file, then deserialize else empty object
			try {
				FileInputStream file = new FileInputStream(dbFile);
				if (file.available() != 0) {
					ObjectInputStream in = new ObjectInputStream(file);
					ArrayList<Users> readObject = (ArrayList<Users>) in.readObject();
					userList = readObject;
					in.close();
					file.close();
				} else {
					userList = new ArrayList<Users>();
				}
			} catch (IOException e) {
				if (e.getClass().toString().equalsIgnoreCase("class java.io.StreamCorruptedException")) {
					System.out.println("---------");
					System.out.println("DB File corrupted");
					System.out.println("Deleting all existing users. Please register again using same username");
					System.out.println("---------");
				} else {
					System.out.println(e.getMessage());
					System.out.println("---------");
					e.printStackTrace();
					System.out.println("---------");
				}
			}
			usersCredList = new ArrayList<UserCreds>();

			// read data from db file
			input = new Scanner(dbFile);

			// red data from locker file
			// lockerInput = new Scanner(lockerFile);
			// read data from keyboard
			keyboard = new Scanner(System.in);

			// out put
			output = new PrintWriter(new FileWriter(dbFile, true));
			// lockerOutput = new PrintWriter(new FileWriter(lockerFile, true));

		} catch (IOException e) {
			System.out.println("404 : File Not Found ");
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}

	}

	public static void signInOptions() {
		System.out.println("1 . Registration ");
		System.out.println("2 . Login ");
		System.out.println("3 . Exit ");
		
		// if
		// int option = keyboard.nextInt();
		do {
			int input = keyboard.nextInt();
			switch (input) {
			case 1:
				registerUser();
				signInOptions();
				break;
			case 2:
				loginUser();
				break;
			case 3:
				System.out.println("Thank you");
				System.exit(0);
				break;
			default:
				System.out.println("Please select 1, 2 or 3");
				break;
			}
		} while (true);
		// keyboard.close();
		// input.close();
	}

	public static void lockerOptions(String inpUsername) {
		boolean goBack = false;

		//deserialise the file into obj
		try {
			File usercreds = new File(inpUsername + ".txt");
			if (usercreds.exists()) {
				FileInputStream file = new FileInputStream(usercreds);
				if (file.available() != 0) {
					ObjectInputStream in = new ObjectInputStream(file);
					ArrayList<UserCreds> readObject = (ArrayList<UserCreds>) in.readObject();
					usersCredList = readObject;
					in.close();
					file.close();
				} else {
					usersCredList = new ArrayList<UserCreds>();
				}
			} else {
				usercreds.createNewFile();
			}
		} catch (IOException e) {
			if (e.getClass().toString().equalsIgnoreCase("class java.io.StreamCorruptedException")) {
				System.out.println("---------");
				System.out.println("User Creds File corrupted");
				System.out.println("Deleting all creds. Please add creds again");
				System.out.println("---------");
			} else {
				System.out.println(e.getMessage());
				System.out.println("---------");
				e.printStackTrace();
				System.out.println("---------");
			}
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
		
		do {
			System.out.println("1 . Fetch all stored creds ");
			System.out.println("2 . Insert new creds ");
			System.out.println("3 . Go Back to login page ");
			System.out.println("4 . Exit ");
			int option = keyboard.nextInt();
			switch (option) {
			case 1:
				fetchCredentials(inpUsername);
				break;
			case 2:
				storeCredentials(inpUsername);
				break;
			case 3:
				goBack = true;
				break;
			case 4:
				System.out.println("Thank you");
				System.exit(0);
				break;
			default:
				System.out.println("Please select 1, 2, 3 or 4");
				break;
			}
		} while (!goBack);
		// lockerInput.close();
	}

	public static void registerUser() {
		Users user = new Users();
		boolean userExist = true, acceptedPass = false;
		System.out.println("==========================================");
		System.out.println("*					*");
		System.out.println("*   WELCOME TO REGISTRATION PAGE	*");
		System.out.println("*					*");
		System.out.println("==========================================");
		System.out.println("Enter your full name:");
		String fullName = keyboard.nextLine();
		user.setFullName(fullName);
		do {
			System.out.println("Enter Username (can be alphanumeric):");
			String username = keyboard.next();
			user.setUsername(username);
			// check if username already exist, then prompt for another username or prompt
			// for pass
			userExist = userList.stream().anyMatch(obj -> obj.getUsername().equalsIgnoreCase(username));
			if (!username.matches("[a-zA-Z0-9]+")) {
				System.out.println("Only alphabets or numbers allowed in username");
			} else if (userExist) {
				System.out.println("Username taken. Please type another username");
			}

		} while (userExist);

		// user.setUsername(username);
		// minimum 6 char alphanumeric
		do {
			System.out.println("Enter alphanumeric Password-");
			System.out.println("\t Minimum 1 digit required");
			System.out.println("\t Minimum 6 & Max 12 char length");
			System.out.println("\t Only @ ! _ - allowed");
			System.out.println("\n");
			String password = keyboard.next();
			acceptedPass = password.matches("^(?=.*[0-9])([a-zA-Z0-9@!_-]){6,12}$");
			user.setPassword(password);
			if (!acceptedPass) {
				System.out.println("Incorrect password format! Please try again");
			}
		} while (!acceptedPass);
		System.out.println(user);
		if (!userExist && acceptedPass) {
			userList.add(user);
			System.out.println(userList);
		}
		// save userList to file
		try {
			FileOutputStream file = new FileOutputStream(dbFileName);
			ObjectOutputStream out = new ObjectOutputStream(file);
			out.writeObject(userList);
			out.close();
			file.close();
			System.out.println("User Registration Suscessful !");
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public static void loginUser() {
		System.out.println("==========================================");
		System.out.println("*					*");
		System.out.println("*   WELCOME TO LOGIN PAGE	 *");
		System.out.println("*					*");
		System.out.println("==========================================");
		// Users user = new Users();
		boolean found = false, acceptedPass = false;
		do {
			System.out.println("Enter Username :");
			String inpUsername = keyboard.next();
			Optional<Users> user = userList.stream().filter(obj -> obj.getUsername().equalsIgnoreCase(inpUsername))
					.findFirst();
			if (user.isPresent()) {
				found = true;
				System.out.println("Found the user");
				do {
					System.out.println("Enter Password :");
					String inpPassword = keyboard.nextLine();
					Users selUser = user.get();
					if (selUser.getPassword().equals(inpPassword.toString())) {
						acceptedPass = true;
						System.out.println("Login Successful ! 200OK");
						users = selUser;
						// Call lockerOption
						lockerOptions(selUser.getUsername().toLowerCase());
					} else {
						System.out.println("Incorrect password provided! Try again..");
					}
				} while (!acceptedPass);
			} else {
				System.out.println("User Not Found : Login Failure : 404");
			}
		} while (!found);

		/*
		 * while (input.hasNext() && !found) { if (input.next().equals(inpUsername)) {
		 * System.out.println("Enter Password :"); String inpPassword = keyboard.next();
		 * if (input.next().equals(inpPassword)) {
		 * System.out.println("Login Successful ! 200OK"); found = true;
		 * lockerOptions(inpUsername); break; } } } if (!found) {
		 * System.out.println("User Not Found : Login Failure : 404"); }
		 */

	}
	

	public static void welcomeScreen() {
		System.out.println("==========================================");
		System.out.println("*					*");
		System.out.println("*   Welcome To LockMe.com		*");
		System.out.println("*   Your Personal Digital Locaker	*");
		System.out.println("*					*");
		System.out.println("==========================================");

	}

	// store credentails
	public static void storeCredentials(String loggedInUser) {
		UserCreds uc = new UserCreds();
		System.out.println("==========================================");
		System.out.println("*					*");
		System.out.println("*   WELCOME TO DIGITAL LOCKER STORE YOUR CREDS HERE	 *");
		System.out.println("*					*");
		System.out.println("==========================================");

		// userCredentials.setLoggedInUser(loggedInUser);

		System.out.println("Enter Site Name :");
		String siteName = keyboard.next();
		uc.setSiteName(siteName);

		System.out.println("Enter Site Username :");
		String username = keyboard.next();
		uc.setUsername(username);

		System.out.println("Enter Password :");
		String password = keyboard.next();
		uc.setPassword(password);

		// lockerOutput.println(userCredentials.getLoggedInUser());
		//lockerOutput.println(userCredentials.getSiteName());
		//lockerOutput.println(userCredentials.getUsername());
		//lockerOutput.println(userCredentials.getPassword());
		usersCredList.add(uc);
		//System.out.println(users.getUsername().toLowerCase()+".txt");
		//Serialise back in file
		try {
			FileOutputStream file = new FileOutputStream(users.getUsername().toLowerCase()+".txt");
			ObjectOutputStream out = new ObjectOutputStream(file);
			out.writeObject(usersCredList);
			out.close();
			file.close();
			System.out.println("YOUR CREDS ARE STORED AND SECURED!");
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	// fetch credentials
	public static void fetchCredentials(String inpUsername) {
		System.out.println("==========================================");
		System.out.println("*					*");
		System.out.println("*   WELCOME TO DIGITAL LOCKER 	 *");
		System.out.println("*   YOUR CREDS ARE 	 *");
		System.out.println("*					*");
		System.out.println("==========================================");
		System.out.println(inpUsername);

		boolean noCreds = true;
		// Find if a file exist with users name. If yes, check content. if 0 no creds to
		// show, else show everything
		if(usersCredList.isEmpty()) {
			System.out.println("No Credentials stored yet..!");
		}
		//traverse the list and show all the creds
		else {
			System.out.println(usersCredList.toString());	
		}

	}
}
